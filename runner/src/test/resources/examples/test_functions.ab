#import("externals_common.ab")
#import("stdlib.ab")

fun voidReturn() {
    printf("Hello from void\n")
}

fun intReturn(): int = 1
fun intReturn2(): int { 1 }

fun forAux(n: int, m: int, fn: () -> int) : int {
    if (n >= 0) { fn(); forAux(n - 1, m + 1, fn) } else 1
}

fun rudimentaryFor(start: int, end: int, fn: () -> int) : int {
    forAux(end - start, start, fn)
}

compiler fun hello(a: int): int {
    printf("hi $a\n")
}

fun test {
    voidReturn()
    if (intReturn() == 1) printf("Int return ok\n") else printf("Int return fail\n")
    if (intReturn2() == 1) printf("Int return ok\n") else printf("Int return fail\n")
    rudimentaryFor(1, 5) {
        printf("$")
    }
    printf("\n")
}

fun a: int = 1
fun b: int = 2

fun testLiteralVoid(hi: () -> void) {
    hi()
}

fun testVoid() {
    fun nestedPrint() {
        printf("Hello from void 3")
    }

    nestedPrint()
}

class Modify

@Modify
fun annotatedFunc {
    printf("hi from unmodified function\n")
}


compiler fun modifiedBlock {
    fun test() {
        printf("Hi from test inside modified function\n")
    }

    printf("hi from modified function\n")
    test()
}

compiler fun modifyAnnotated {
    compilerContext.findAnnotated("Modify").block = compilerContext.find("modifiedBlock").block
}

fun main: int {
    #test()
    #hello(1)
    test()
    testLiteralVoid {
        printf("Hello from void 1")
    }
    testLiteralVoid({ printf("Hello from void 2") })
    testLiteralVoid(testVoid)
    #annotatedFunc()
    #modifyAnnotated()
    #annotatedFunc()
    annotatedFunc()
    (if (1 == 1) a else b)()
}