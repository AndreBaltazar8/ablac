#import("externals_common.ab")
#import("stdlib.ab")

class Request(var remoteAddr: string)
class ILocationService
class API
class Inject
class Route(val route: string, val testInt: int)
class Version(val version: int)
class MyIPResponse(val address: string)
class MyIPResponseV2(val address: string, val location: string)

fun testAnnotationValue: int = 23

@Route("myip", testAnnotationValue())
class IPLookupAPI {
    var request: Request

    @Version(1)
    fun myip: MyIPResponse = MyIPResponse(this.request.remoteAddr)

    @Version(2)
    fun myip: MyIPResponseV2 = MyIPResponseV2(this.request.remoteAddr, "hi")
}

compiler fun annotationCheck(): int {
    // Print route url
    val classDefinition = compilerContext.type<IPLookupAPI>()
    printf("${classDefinition.annotation<Route>().route}\n")

    // Process methods
    val methods = classDefinition.methods
    var a = 0

    while (a < classDefinition.numMethods) {
        val method = methods[a]

        // Calculate the final name
        val finalName = "${method.name}_v${method.annotation<Version>().version}"

        // Rename the method to include the version number
        printf("Renaming ${method.name} to $finalName\n")
        method.name = finalName
        method.wrap { body: any ->
            fun previous(): int {
                printf("Previous")
            }
            var hi = "Hello"
            printf(hi)
            body()
        }

        a = a + 1
    }
}

fun main: int {
    val api = IPLookupAPI()
    api.request = Request("123.123.123.123")
    printf(api.myip_v2().address)
    (#annotationCheck()).plus(10)
}

/*@Route("myip")
class IPLookupAPI(
  @Inject val locationService: ILocationService
) : API {
  @Version(1)
  fun myip = MyIPResponse(request.remoteaddr.toString())

  @Version(2)
  fun myip = previous().let {
    MyIPResponseV2(it.address, locationService.lookupLocation(it.address))
  }
}*/