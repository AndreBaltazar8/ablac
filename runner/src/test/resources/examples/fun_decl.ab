#import("hello1.ab")

compiler fun from(name: string, decl: () -> int): int {
    1
}

//extern:"abla_runtime" fun printi(value: int)
extern:"c" fun printf(fmt: string): int

/*#from("abla_runtime") {
    extern fun printi(value: int)
    extern fun prints(str: string)
}*/

fun wrap(fn: () -> int): int {
    fn()
}

#{
    printf("hi")
    declareFun("abc") {
        printf("hello")
    }
}()

compiler fun hello(a: int): int {
    printf("hiff $a\n")
}

fun voidReturn() {
    printf("Hello from void\n")
}

fun testVar() {
    var a = hi1()
    var b = 2
    var c = a + b
    if (c == 3)
        printf("Var test: ok\n")
    else
        printf("Var test: fail\n")

    b = a = 5
    if (a == 5)
        printf("Var test 2: ok\n")
    else
        printf("Var test 2: fail\n")

    if (b == 5)
        printf("Var test 3: ok\n")
    else
        printf("Var test 3: fail\n")
}

fun forAux(n: int, m: int, fn: () -> int) : int {
    if (n >= 0) { fn() forAux(n - 1, m + 1, fn) } else 1
}

fun rudimentaryFor(start: int, end: int, fn: () -> int) : int {
    forAux(end - start, start, fn)
}

fun main: int {
    var a = 0
    while (a < 80) {
        printf("#")
        a = a + 1
    }
    printf("\n")

    #rudimentaryFor(1, 5) {
        printf("$")
    }
    #printf("\n")

    testVar()
    #testVar()
    abc();
    {
        4
    }()
    hi1()
    #hello(1)
    /*#printi(wrap {
        123
    })*/
    #printf("aad")
    printf("hello\u0020hi\n")
    voidReturn()
    if (fact(5) == 120) printf("fact(5) = 120\n") else printf("fact(5) != 120\n")
    assertValue("fact(4)", fact(4), 24, "expecting fact(4) to be 24\n")
    assertValue("fact(5)", fact(5), 120, "expecting fact(5) to be 120\n")
    #test(11) * 2
    div(2) > 2
}

fun fact(n: int):int = if (n > 1) n * fact(n - 1) else 1

fun assertValue(test: string, actual: int, expected: int, message: string) {
    if (actual == expected) {
        printf(test)
        printf(" ok\n")
    } else {
        printf(test)
        printf(" failed: ")
        printf(message)
    }
}

fun test(a: int): int = a
fun div(a: int): int = 8/a

class Chicken {
    fun quack: int = 1
}
