class int {
    fun plus(other: int): int = this + other
}

class array
class string
class any
class bool

interface Collection {
    val size: int
}

compiler abstract class Compiler {
    compiler abstract class Node {
        compiler abstract class Block
    }
}

compiler abstract class CompilerContext {
    abstract fun type<T>: CompilerClassContext
    abstract fun findClass(name: string): CompilerClassContext
    abstract fun find(name: string): CompilerFunctionContext
    abstract fun findAnnotated(annotation: string): CompilerFunctionContext
    abstract fun modify<T>(name: string, func: () -> T)
    abstract fun setBody<T>(func: () -> T)
    abstract fun rename(newName: string)
    abstract fun defineInClass(func: () -> void)
}

compiler abstract class CompilerFunctionContext {
    abstract var name: string
    abstract var block: Compiler.Node.Block
    abstract fun annotation<T>(): T
}

compiler abstract class CompilerClassContext {
    abstract fun annotation<T>(): T
    abstract val methods: array<CompilerFunctionContext>
}