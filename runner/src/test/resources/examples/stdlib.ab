compile fun lib(name: string, provider: ((name: string) -> void)? = null) {
    if (provider == null)
        import("$name/entry.ab")
    else
        provider(name)
}

compile fun git(name: string) {
    printf("Provided by git\n")
    printf("Lib: $name\n")
}

class int {
    fun plus(other: int): int = this + other
}

class array
class string
class any
class bool

interface Collection {
    val size: int
}

compile abstract class Compiler {
    compile abstract class Node {
        compile abstract class Block
    }
}

compile abstract class CompilerContext {
    abstract fun type<T>: CompilerClassContext
    abstract fun findClass(name: string): CompilerClassContext
    abstract fun find(name: string): CompilerFunctionContext
    abstract fun findAnnotated(annotation: string): CompilerFunctionContext
    abstract fun modify<T>(name: string, func: () -> T)
    abstract fun setBody<T>(func: () -> T)
    abstract fun rename(newName: string)
    abstract fun defineInClass(func: () -> void)
}

compile abstract class CompilerFunctionContext {
    abstract var name: string
    abstract var block: Compiler.Node.Block
    abstract fun annotation<T>(): T
    abstract fun wrap(fn: (body: any) -> void)
}

compile abstract class CompilerClassContext {
    abstract fun annotation<T>(): T
    abstract val methods: array<CompilerFunctionContext>
    abstract val numMethods: int
}